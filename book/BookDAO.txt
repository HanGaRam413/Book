package book;

import java.sql.*;
import java.util.Vector;

public class BookDAO {
    private static final String DRIVER = "com.mysql.jdbc.Driver";
    private static final String URL = "jdbc:mysql://localhost:3306/mydb";
    private static final String USER = "root";
    private static final String PW = "1234";

    public Connection getConn() {
        Connection conn = null;

        try {
            Class.forName(DRIVER);
            conn = DriverManager.getConnection(URL, USER, PW);
            System.out.println("DB 정상 접속");
        } catch (Exception e) {
            System.out.print("DB 접속 실패");
            e.printStackTrace();
        }
        return conn;
    }

    public int insertBook(BookDTO dto) {
        Connection conn = null;
        PreparedStatement ps = null;
        int result = 0;

        try {
            conn = getConn();
            String sql = "INSERT INTO books VALUES (?, ?, ?, ?, 0)"; // status 기본값을 0으로 설정
            ps = conn.prepareStatement(sql);
            ps.setInt(1, dto.getCode());
            ps.setString(2, dto.getBook_name());
            ps.setString(3, dto.getAuthor_name());
            ps.setInt(4, dto.getYear());

            result = ps.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
			try {
				if(ps != null)
					ps.close();
				if(conn != null)
					conn.close();
			} catch (Exception e) {
				
			}
		}
		return result;
	}
	
    public Vector getBooks() {
        Vector data = new Vector();
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            con = getConn();
            String sql = "SELECT * FROM books ORDER BY book_name ASC";
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();

            while (rs.next()) {
                int code = rs.getInt("code");
                String book_name = rs.getString("book_name");
                String author_name = rs.getString("author_name");
                int year = rs.getInt("year");
                int status = rs.getInt("status");

                String statusText = (status == 1) ? "대여중" : "대여가능";

                Vector row = new Vector();
                row.add(code);
                row.add(book_name);
                row.add(author_name);
                row.add(year);
                row.add(statusText);

                data.add(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
			try {
				if(rs != null)
					rs.close();
				if(ps != null)
					ps.close();
				if(con != null)
					con.close();
			} catch (Exception e) {
			}
		}
		return data;
	}
	
    public int deleteBook(BookDTO dto) {
        Connection conn = null;
        PreparedStatement ps = null;
        int result = 0;

        try {
            conn = getConn();
            String sql = "DELETE FROM books WHERE book_name = ?";
            ps = conn.prepareStatement(sql);
            ps.setString(1, dto.getBook_name());
            result = ps.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
			try {
				if(ps != null)
					ps.close();
				if(conn != null)
					conn.close();
			} catch (Exception e) {
				
			}
		}
		return result;
	}
	
    public int updateScore(BookDTO dto) {
        Connection con = null;
        PreparedStatement ps = null;
        int result = 0;

        try {
            con = getConn();
            String sql = "UPDATE books SET code = ?, book_name = ?, author_name = ?, year = ? WHERE book_name = ?";
            ps = con.prepareStatement(sql);
            ps.setInt(1, dto.getCode());
            ps.setString(2, dto.getBook_name());
            ps.setString(3, dto.getAuthor_name());
            ps.setInt(4, dto.getYear());

            result = ps.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
			try {
				if(ps != null)
					ps.close();
				if(con != null)
					con.close();
			} catch (Exception e2) {
				
			}
		}
		return result;
	}

    public Vector searchBook(BookDTO bookDTO) {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        Vector data = new Vector();

        try {
            conn = getConn();
            String sql = "SELECT * FROM books WHERE book_name LIKE ? AND author_name LIKE ? ORDER BY book_name ASC";
            ps = conn.prepareStatement(sql);
            ps.setString(1, "%" + bookDTO.getBook_name() + "%");
            ps.setString(2, "%" + bookDTO.getAuthor_name() + "%");
            rs = ps.executeQuery();

            while (rs.next()) {
                int code = rs.getInt("code");
                String book_name = rs.getString("book_name");
                String author_name = rs.getString("author_name");
                int year = rs.getInt("year");
                int status = rs.getInt("status");

                Vector row = new Vector();
                row.add(code);
                row.add(book_name);
                row.add(author_name);
                row.add(year);
                row.add(status);

                data.add(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
	    	try {
	            if (rs != null) {
	                rs.close();
	            }
	            if (ps != null) {
	                ps.close();
	            }
	            if (conn != null) {
	                conn.close();
	            }
	        } catch (SQLException e) {
	            e.printStackTrace();
	        }
	    }

	    return data;
	}
}
