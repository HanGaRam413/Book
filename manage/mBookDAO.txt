package manage;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

public class BookDAO {
    private static final String DRIVER = "com.mysql.jdbc.Driver";
    private static final String URL = "jdbc:mysql://localhost:3306/mydb";
    private static final String USER = "root";
    private static final String PW = "1234";

    public Connection getConn() {
        Connection conn = null;

        try {
            Class.forName(DRIVER);
            conn = DriverManager.getConnection(URL, USER, PW);
            System.out.println("DB 정상 접속");
        } catch (Exception e) {
            System.out.print("DB 접속 실패");
            e.printStackTrace();
        }
        return conn;
    }

    public void updateReturnState() {
        Connection conn = null;
        PreparedStatement setToDayStmt = null;
        PreparedStatement updateStmt = null;

        try {
            conn = getConn();

            // toDay 열이 존재하는지 확인하고, 없으면 추가합니다.
            String checkColumnQuery = "SELECT toDay FROM managebooks LIMIT 1";
            try (PreparedStatement checkStmt = conn.prepareStatement(checkColumnQuery)) {
                checkStmt.executeQuery();
            } catch (SQLException e) {
                // 쿼리가 실패하면 열이 존재하지 않습니다.
                String addColumnQuery = "ALTER TABLE managebooks ADD COLUMN toDay DATE DEFAULT '2024-02-25'";
                try (PreparedStatement addColumnStmt = conn.prepareStatement(addColumnQuery)) {
                    addColumnStmt.executeUpdate();
                }
            }

            // toDay를 '2024-02-25'로 설정합니다.
            String setToDayQuery = "UPDATE managebooks SET toDay = '2024-02-25'";
            setToDayStmt = conn.prepareStatement(setToDayQuery);
            setToDayStmt.executeUpdate();

            // 대여 상태에 따라 returnState를 업데이트합니다.
            String updateQuery = "UPDATE managebooks SET returnState = CASE WHEN returnDate > toDay THEN '대여중' ELSE '연체' END";
            updateStmt = conn.prepareStatement(updateQuery);
            updateStmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            closeResources(conn, setToDayStmt, null);
            closeResources(null, updateStmt, null);
        }
    }

    public List<BookDTO> getOverdueBooks() {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        List<BookDTO> overdueBooks = new ArrayList<>();

        try {
            conn = getConn();
            String query = "SELECT * FROM managebooks";
            stmt = conn.prepareStatement(query);
            rs = stmt.executeQuery();

            while (rs.next()) {
                BookDTO bookDTO = new BookDTO();
                bookDTO.setCode(rs.getInt("code"));
                bookDTO.setBookName(rs.getString("book_name"));
                bookDTO.setAuthorName(rs.getString("author_name"));
                bookDTO.setYear(rs.getInt("year"));
                bookDTO.setStatus(rs.getInt("status"));
                bookDTO.setCheckoutDate(rs.getDate("checkoutDate"));
                bookDTO.setReturnDate(rs.getDate("returnDate"));
                bookDTO.setToDay(rs.getDate("toDay"));
                bookDTO.setReturnState(rs.getString("returnState"));

                overdueBooks.add(bookDTO);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            closeResources(conn, stmt, rs);
        }

        return overdueBooks;
    }

    private void closeResources(Connection conn, Statement stmt, ResultSet rs) {
        try {
            if (rs != null) {
                rs.close();
            }
            if (stmt != null) {
                stmt.close();
            }
            if (conn != null) {
                conn.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public boolean addBook(BookDTO bookDTO) {
        Connection conn = null;
        PreparedStatement stmt = null;
        boolean success = false;

        try {
            conn = getConn();
            String query = "INSERT INTO managebooks (book_name, author_name, year) VALUES (?, ?, ?)";
            stmt = conn.prepareStatement(query);

            // 도서명이 null이거나 빈 문자열인 경우 빈 문자열로 설정
            String bookName = (bookDTO.getBookName() != null) ? bookDTO.getBookName() : "";
            // 저자명이 null이거나 빈 문자열인 경우 빈 문자열로 설정
            String authorName = (bookDTO.getAuthorName() != null) ? bookDTO.getAuthorName() : "";
            // 출판년도가 null이거나 빈 문자열인 경우 0으로 설정
            String yearStr = String.valueOf(bookDTO.getYear());
            int year = 0;
            if (!yearStr.isEmpty()) {
                year = Integer.parseInt(yearStr);
            }

            stmt.setString(1, bookName);
            stmt.setString(2, authorName);
            stmt.setInt(3, year);

            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected > 0) {
                success = true;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            closeResources(conn, stmt, null);
        }

        return success;
    }

    public void updateCheckoutAndReturnDate() {
        Connection conn = null;
        PreparedStatement stmt = null;

        try {
            conn = getConn();
            String query = "UPDATE managebooks " +
                           "SET checkoutDate = CURDATE() + INTERVAL FLOOR(RAND() * 30) DAY, " +
                           "    returnDate = DATE_ADD(checkoutDate, INTERVAL 7 DAY)";
            stmt = conn.prepareStatement(query);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            closeResources(conn, stmt, null);
        }
        
    }
    
    public void updateStatus() {
        Connection conn = null;
        PreparedStatement stmt = null;

        try {
            conn = getConn();
            String query = "UPDATE managebooks " +
                           "SET status = CASE WHEN RAND() < 0.5 THEN 1 ELSE 0 END " +
                           "WHERE status IS NULL"; // 또는 적절한 WHERE 조건을 사용
            stmt = conn.prepareStatement(query);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            closeResources(conn, stmt, null);
        }
    }
}